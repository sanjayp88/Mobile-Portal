//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpensePortal.DocumentServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentDescripton", Namespace="http://schemas.datacontract.org/2004/07/DocumentService")]
    [System.SerializableAttribute()]
    public partial class DocumentDescripton : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdatedUtcField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descriptor {
            get {
                return this.DescriptorField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptorField, value) != true)) {
                    this.DescriptorField = value;
                    this.RaisePropertyChanged("Descriptor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdatedUtc {
            get {
                return this.UpdatedUtcField;
            }
            set {
                if ((this.UpdatedUtcField.Equals(value) != true)) {
                    this.UpdatedUtcField = value;
                    this.RaisePropertyChanged("UpdatedUtc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DocumentServiceReference.IDocumentService")]
    public interface IDocumentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/GetDocumentDescriptions", ReplyAction="http://tempuri.org/IDocumentService/GetDocumentDescriptionsResponse")]
        ExpensePortal.DocumentServiceReference.DocumentDescripton[] GetDocumentDescriptions(string product, string payrollId, string[] categories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/GetDocumentDescriptions", ReplyAction="http://tempuri.org/IDocumentService/GetDocumentDescriptionsResponse")]
        System.Threading.Tasks.Task<ExpensePortal.DocumentServiceReference.DocumentDescripton[]> GetDocumentDescriptionsAsync(string product, string payrollId, string[] categories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/GetDocumentByDescriptor", ReplyAction="http://tempuri.org/IDocumentService/GetDocumentByDescriptorResponse")]
        ExpensePortal.DocumentServiceReference.DocumentDescripton GetDocumentByDescriptor(string descriptor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/GetDocumentByDescriptor", ReplyAction="http://tempuri.org/IDocumentService/GetDocumentByDescriptorResponse")]
        System.Threading.Tasks.Task<ExpensePortal.DocumentServiceReference.DocumentDescripton> GetDocumentByDescriptorAsync(string descriptor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/GetDocumentByWorkOrderAndPayroll", ReplyAction="http://tempuri.org/IDocumentService/GetDocumentByWorkOrderAndPayrollResponse")]
        ExpensePortal.DocumentServiceReference.DocumentDescripton GetDocumentByWorkOrderAndPayroll(string product, string category, string payrollId, string workOrderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/GetDocumentByWorkOrderAndPayroll", ReplyAction="http://tempuri.org/IDocumentService/GetDocumentByWorkOrderAndPayrollResponse")]
        System.Threading.Tasks.Task<ExpensePortal.DocumentServiceReference.DocumentDescripton> GetDocumentByWorkOrderAndPayrollAsync(string product, string category, string payrollId, string workOrderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/WriteDocument", ReplyAction="http://tempuri.org/IDocumentService/WriteDocumentResponse")]
        void WriteDocument(string product, string category, string employeeName, string payrollId, string fileName, byte[] contents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/WriteDocument", ReplyAction="http://tempuri.org/IDocumentService/WriteDocumentResponse")]
        System.Threading.Tasks.Task WriteDocumentAsync(string product, string category, string employeeName, string payrollId, string fileName, byte[] contents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/DeleteDocument", ReplyAction="http://tempuri.org/IDocumentService/DeleteDocumentResponse")]
        void DeleteDocument(string product, string category, string payrollId, string workOrderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentService/DeleteDocument", ReplyAction="http://tempuri.org/IDocumentService/DeleteDocumentResponse")]
        System.Threading.Tasks.Task DeleteDocumentAsync(string product, string category, string payrollId, string workOrderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDocumentServiceChannel : ExpensePortal.DocumentServiceReference.IDocumentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DocumentServiceClient : System.ServiceModel.ClientBase<ExpensePortal.DocumentServiceReference.IDocumentService>, ExpensePortal.DocumentServiceReference.IDocumentService {
        
        public DocumentServiceClient() {
        }
        
        public DocumentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DocumentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ExpensePortal.DocumentServiceReference.DocumentDescripton[] GetDocumentDescriptions(string product, string payrollId, string[] categories) {
            return base.Channel.GetDocumentDescriptions(product, payrollId, categories);
        }
        
        public System.Threading.Tasks.Task<ExpensePortal.DocumentServiceReference.DocumentDescripton[]> GetDocumentDescriptionsAsync(string product, string payrollId, string[] categories) {
            return base.Channel.GetDocumentDescriptionsAsync(product, payrollId, categories);
        }
        
        public ExpensePortal.DocumentServiceReference.DocumentDescripton GetDocumentByDescriptor(string descriptor) {
            return base.Channel.GetDocumentByDescriptor(descriptor);
        }
        
        public System.Threading.Tasks.Task<ExpensePortal.DocumentServiceReference.DocumentDescripton> GetDocumentByDescriptorAsync(string descriptor) {
            return base.Channel.GetDocumentByDescriptorAsync(descriptor);
        }
        
        public ExpensePortal.DocumentServiceReference.DocumentDescripton GetDocumentByWorkOrderAndPayroll(string product, string category, string payrollId, string workOrderId) {
            return base.Channel.GetDocumentByWorkOrderAndPayroll(product, category, payrollId, workOrderId);
        }
        
        public System.Threading.Tasks.Task<ExpensePortal.DocumentServiceReference.DocumentDescripton> GetDocumentByWorkOrderAndPayrollAsync(string product, string category, string payrollId, string workOrderId) {
            return base.Channel.GetDocumentByWorkOrderAndPayrollAsync(product, category, payrollId, workOrderId);
        }
        
        public void WriteDocument(string product, string category, string employeeName, string payrollId, string fileName, byte[] contents) {
            base.Channel.WriteDocument(product, category, employeeName, payrollId, fileName, contents);
        }
        
        public System.Threading.Tasks.Task WriteDocumentAsync(string product, string category, string employeeName, string payrollId, string fileName, byte[] contents) {
            return base.Channel.WriteDocumentAsync(product, category, employeeName, payrollId, fileName, contents);
        }
        
        public void DeleteDocument(string product, string category, string payrollId, string workOrderId) {
            base.Channel.DeleteDocument(product, category, payrollId, workOrderId);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentAsync(string product, string category, string payrollId, string workOrderId) {
            return base.Channel.DeleteDocumentAsync(product, category, payrollId, workOrderId);
        }
    }
}
